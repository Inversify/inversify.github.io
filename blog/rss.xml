<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>InversifyJS Blog</title>
        <link>https://inversify.github.io/blog/</link>
        <description>InversifyJS Blog</description>
        <lastBuildDate>Sun, 26 Jan 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Announcing 7.0.0-alpha.2]]></title>
            <link>https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-2-prerelease/</link>
            <guid>https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-2-prerelease/</guid>
            <pubDate>Sun, 26 Jan 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[In this version, we are announcing significant performance improvements! Let's see how caches can assist us in accomplishing such a feat!]]></description>
            <content:encoded><![CDATA[<p>In this version, we are announcing significant performance improvements! Let's see how caches can assist us in accomplishing such a feat!</p>
<h2 class="anchor anchorWithStickyNavbar_swVo" id="context">Context<a href="https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-2-prerelease/#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_swVo" id="the-current-container-design">The current container design<a href="https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-2-prerelease/#the-current-container-design" class="hash-link" aria-label="Direct link to The current container design" title="Direct link to The current container design">​</a></h3>
<p>Like previous versions of Inversify, when a service resolution is requested by calling <code>container.get</code>, a planner schedules the bindings to be used in a tree structure, which is then used to build the instances that compose the requested service.</p>
<h3 class="anchor anchorWithStickyNavbar_swVo" id="adding-a-caching-strategy">Adding a caching strategy<a href="https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-2-prerelease/#adding-a-caching-strategy" class="hash-link" aria-label="Direct link to Adding a caching strategy" title="Direct link to Adding a caching strategy">​</a></h3>
<p>Previous versions of Inversify don't cache plans. It might sound surprising, but it's the way it is. Previous versions of Inversify expose too many internal APIs, making it impossible for plans to be deterministic. For example, previous versions of Inversify give <code>container</code> access via context to binding constraints, allowing the possibility to cause side effects in the planning phase!</p>
<p>With some reasonable restrictions, <code>inversify@7</code> keeps the same degree of flexibility with deterministic internal plans. But, wait, if plans are deterministic, they can be cached!</p>
<h4 class="anchor anchorWithStickyNavbar_swVo" id="why-cache-plans">Why cache plans?<a href="https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-2-prerelease/#why-cache-plans" class="hash-link" aria-label="Direct link to Why cache plans?" title="Direct link to Why cache plans?">​</a></h4>
<p>You don't need to compute a cached plan again, and the garbage collector doesn't need to clear memory of a non-computed cached plan, which is an operation heavier than you might expect when optimizing these micro tasks.</p>
<h2 class="anchor anchorWithStickyNavbar_swVo" id="results">Results<a href="https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-2-prerelease/#results" class="hash-link" aria-label="Direct link to Results" title="Direct link to Results">​</a></h2>
<p>After running some benchmarks, Inversify 7 is faster than Inversify 6 when working with singleton scope services and way faster when working with transient scoped services.</p>
<p>We will use a faster container for reference. Tsyringe is the perfect candidate: their simplicity allows resolving services without any planning phase, and therefore it's going to be way faster than Inversify.</p>
<p>Benchmark implementation can be observed at the <code>@inversifyjs/container-benchmarks</code> package. Feel free to run them or have a look at any of the latest monorepo PRs which include benchmark results.</p>
<p>As of today, the latest benchmark results are as follows:</p>
<div class="language-bash codeBlockContainer_zlZW theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_Cc19"><pre tabindex="0" class="prism-code language-bash codeBlock_acU3 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_QJje"><span class="token-line" style="color:#393A34"><span class="token plain">[CJS] Running benchmarks...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Get service in singleton scope</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">┌─────────┬────────────────────┬──────────────────────┬─────────────────────┬────────────────────────────┬───────────────────────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ (index) │ Task name          │ Latency average (ns) │ Latency median (ns) │ Throughput average (ops/s) │ Throughput median (ops/s) │ Samples │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├─────────┼────────────────────┼──────────────────────┼─────────────────────┼────────────────────────────┼───────────────────────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 0       │ 'inversifyCurrent' │ '582.96 ± 0.80%'     │ '561.00'            │ '1758258 ± 0.01%'          │ '1782531'                 │ 1715395 │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 1       │ 'inversify6'       │ '1136.19 ± 0.35%'    │ '982.00'            │ '961212 ± 0.03%'           │ '1018330'                 │ 880137  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 2       │ 'tsyringe'         │ '329.02 ± 1.10%'     │ '291.00'            │ '3271688 ± 0.01%'          │ '3436426'                 │ 3039353 │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└─────────┴────────────────────┴──────────────────────┴─────────────────────┴────────────────────────────┴───────────────────────────┴─────────┘</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Get service in transient scope</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">┌─────────┬────────────────────┬──────────────────────┬─────────────────────┬────────────────────────────┬───────────────────────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ (index) │ Task name          │ Latency average (ns) │ Latency median (ns) │ Throughput average (ops/s) │ Throughput median (ops/s) │ Samples │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├─────────┼────────────────────┼──────────────────────┼─────────────────────┼────────────────────────────┼───────────────────────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 0       │ 'inversifyCurrent' │ '1023.52 ± 0.29%'    │ '992.00'            │ '1003603 ± 0.01%'          │ '1008065'                 │ 977022  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 1       │ 'inversify6'       │ '5181.39 ± 0.41%'    │ '4960.00'           │ '198404 ± 0.03%'           │ '201613'                  │ 192999  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 2       │ 'tsyringe'         │ '466.06 ± 0.85%'     │ '441.00'            │ '2261272 ± 0.01%'          │ '2267574'                 │ 2145645 │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└─────────┴────────────────────┴──────────────────────┴─────────────────────┴────────────────────────────┴───────────────────────────┴─────────┘</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Get complex service in singleton scope</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">┌─────────┬────────────────────┬──────────────────────┬─────────────────────┬────────────────────────────┬───────────────────────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ (index) │ Task name          │ Latency average (ns) │ Latency median (ns) │ Throughput average (ops/s) │ Throughput median (ops/s) │ Samples │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├─────────┼────────────────────┼──────────────────────┼─────────────────────┼────────────────────────────┼───────────────────────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 0       │ 'inversifyCurrent' │ '614.26 ± 1.74%'     │ '591.00'            │ '1673265 ± 0.01%'          │ '1692047'                 │ 1627989 │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 1       │ 'inversify6'       │ '1061.52 ± 0.48%'    │ '1001.00'           │ '989393 ± 0.01%'           │ '999001'                  │ 942048  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 2       │ 'tsyringe'         │ '335.53 ± 0.58%'     │ '311.00'            │ '3171618 ± 0.01%'          │ '3215434'                 │ 2980330 │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└─────────┴────────────────────┴──────────────────────┴─────────────────────┴────────────────────────────┴───────────────────────────┴─────────┘</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Get complex service in transient scope</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">┌─────────┬────────────────────┬──────────────────────┬────────────────────────┬────────────────────────────┬───────────────────────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ (index) │ Task name          │ Latency average (ns) │ Latency median (ns)    │ Throughput average (ops/s) │ Throughput median (ops/s) │ Samples │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├─────────┼────────────────────┼──────────────────────┼────────────────────────┼────────────────────────────┼───────────────────────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 0       │ 'inversifyCurrent' │ '349104.25 ± 0.51%'  │ '340334.00'            │ '2893 ± 0.28%'             │ '2938'                    │ 2865    │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 1       │ 'inversify6'       │ '5023278.98 ± 1.16%' │ '4783030.50 ± 4958.50' │ '200 ± 1.00%'              │ '209'                     │ 200     │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 2       │ 'tsyringe'         │ '249415.89 ± 0.59%'  │ '237333.00'            │ '4088 ± 0.32%'             │ '4213'                    │ 4011    │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└─────────┴────────────────────┴──────────────────────┴────────────────────────┴────────────────────────────┴───────────────────────────┴─────────┘</span><br></span></code></pre><div class="buttonGroup_FDHa"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Ittz" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_bzMM"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_Y8gg"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_zlZW theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_Cc19"><pre tabindex="0" class="prism-code language-bash codeBlock_acU3 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_QJje"><span class="token-line" style="color:#393A34"><span class="token plain">[ESM] Running benchmarks...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Get service in singleton scope</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">┌─────────┬────────────────────┬──────────────────────┬─────────────────────┬────────────────────────────┬───────────────────────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ (index) │ Task name          │ Latency average (ns) │ Latency median (ns) │ Throughput average (ops/s) │ Throughput median (ops/s) │ Samples │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├─────────┼────────────────────┼──────────────────────┼─────────────────────┼────────────────────────────┼───────────────────────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 0       │ 'inversifyCurrent' │ '578.15 ± 0.88%'     │ '541.00'            │ '1809935 ± 0.01%'          │ '1848429'                 │ 1729642 │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 1       │ 'inversify6'       │ '904.50 ± 0.33%'     │ '851.00'            │ '1159099 ± 0.01%'          │ '1175088'                 │ 1105586 │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 2       │ 'tsyringe'         │ '287.15 ± 1.12%'     │ '261.00'            │ '3722553 ± 0.01%'          │ '3831418'                 │ 3482456 │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└─────────┴────────────────────┴──────────────────────┴─────────────────────┴────────────────────────────┴───────────────────────────┴─────────┘</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Get service in transient scope</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">┌─────────┬────────────────────┬──────────────────────┬─────────────────────┬────────────────────────────┬───────────────────────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ (index) │ Task name          │ Latency average (ns) │ Latency median (ns) │ Throughput average (ops/s) │ Throughput median (ops/s) │ Samples │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├─────────┼────────────────────┼──────────────────────┼─────────────────────┼────────────────────────────┼───────────────────────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 0       │ 'inversifyCurrent' │ '837.39 ± 0.28%'     │ '802.00'            │ '1232351 ± 0.01%'          │ '1246883'                 │ 1194187 │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 1       │ 'inversify6'       │ '4868.25 ± 0.32%'    │ '4679.00'           │ '211104 ± 0.03%'           │ '213721'                  │ 205413  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 2       │ 'tsyringe'         │ '494.17 ± 0.40%'     │ '461.00'            │ '2118431 ± 0.01%'          │ '2169197'                 │ 2023611 │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└─────────┴────────────────────┴──────────────────────┴─────────────────────┴────────────────────────────┴───────────────────────────┴─────────┘</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Get complex service in singleton scope</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">┌─────────┬────────────────────┬──────────────────────┬─────────────────────┬────────────────────────────┬───────────────────────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ (index) │ Task name          │ Latency average (ns) │ Latency median (ns) │ Throughput average (ops/s) │ Throughput median (ops/s) │ Samples │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├─────────┼────────────────────┼──────────────────────┼─────────────────────┼────────────────────────────┼───────────────────────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 0       │ 'inversifyCurrent' │ '606.92 ± 1.72%'     │ '571.00'            │ '1739723 ± 0.01%'          │ '1751313'                 │ 1647652 │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 1       │ 'inversify6'       │ '924.23 ± 2.51%'     │ '852.00'            │ '1153936 ± 0.01%'          │ '1173709'                 │ 1081983 │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 2       │ 'tsyringe'         │ '307.19 ± 0.48%'     │ '290.00'            │ '3432297 ± 0.01%'          │ '3448276'                 │ 3255286 │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└─────────┴────────────────────┴──────────────────────┴─────────────────────┴────────────────────────────┴───────────────────────────┴─────────┘</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Get complex service in transient scope</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">┌─────────┬────────────────────┬──────────────────────┬─────────────────────────┬────────────────────────────┬───────────────────────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ (index) │ Task name          │ Latency average (ns) │ Latency median (ns)     │ Throughput average (ops/s) │ Throughput median (ops/s) │ Samples │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├─────────┼────────────────────┼──────────────────────┼─────────────────────────┼────────────────────────────┼───────────────────────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 0       │ 'inversifyCurrent' │ '249696.67 ± 0.47%'  │ '241791.00'             │ '4047 ± 0.24%'             │ '4136'                    │ 4005    │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 1       │ 'inversify6'       │ '4596691.40 ± 1.18%' │ '4710800.50 ± 16420.50' │ '219 ± 0.99%'              │ '212 ± 1'                 │ 218     │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 2       │ 'tsyringe'         │ '235461.28 ± 0.43%'  │ '227424.00'             │ '4296 ± 0.25%'             │ '4397'                    │ 4247    │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└─────────┴────────────────────┴──────────────────────┴─────────────────────────┴────────────────────────────┴───────────────────────────┴─────────┘</span><br></span></code></pre><div class="buttonGroup_FDHa"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Ittz" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_bzMM"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_Y8gg"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As you can see, <code>inversify@7</code> performs way better than <code>inversify@6</code> in every scenario, especially when working with transient scopes. It's slower than <code>tsyringe</code>, but now I honestly believe Inversify is fast enough while providing a more flexible API.</p>
<h2 class="anchor anchorWithStickyNavbar_swVo" id="whats-next">What's next<a href="https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-2-prerelease/#whats-next" class="hash-link" aria-label="Direct link to What's next" title="Direct link to What's next">​</a></h2>
<p>Further performance optimizations can be accomplished. It's out of the scope of <code>inversify@7</code>, but let me say that we will make Inversify faster than <code>tsyringe</code> while providing the same flexible API. If you want to be part of it, don't hesitate to open a discussion in the <a href="https://github.com/inversify/monorepo/" target="_blank" rel="noopener noreferrer">monorepo</a> and join us in this adventure!</p>]]></content:encoded>
            <category>Releases</category>
        </item>
        <item>
            <title><![CDATA[Announcing 7.0.0-alpha.0]]></title>
            <link>https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-0-prerelease/</link>
            <guid>https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-0-prerelease/</guid>
            <pubDate>Mon, 20 Jan 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[It's been a while since the last time inversify released a major version. Some exciting changes are on their way, and we are announcing them in a prerelease so you can participate and discuss them before it's finally released.]]></description>
            <content:encoded><![CDATA[<p>It's been a while since the last time <code>inversify</code> released a major version. Some exciting changes are on their way, and we are announcing them in a prerelease so you can participate and <a href="https://github.com/inversify/InversifyJS/discussions/1712" target="_blank" rel="noopener noreferrer">discuss</a> them before it's finally released.</p>
<p>Feel free to check out the <a href="https://inversify.github.io/docs/next/introduction/getting-started/">next version docs</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_swVo" id="notable-changes">Notable changes<a href="https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-0-prerelease/#notable-changes" class="hash-link" aria-label="Direct link to Notable changes" title="Direct link to Notable changes">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_swVo" id="injection-inheritance">Injection inheritance<a href="https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-0-prerelease/#injection-inheritance" class="hash-link" aria-label="Direct link to Injection inheritance" title="Direct link to Injection inheritance">​</a></h3>
<p>Previous versions of inversify provided implicit injection inheritance. However, this approach was deprecated in favor of the <code>@injectFromBase</code> decorator. This decorator allows you to inject dependencies from the base class.</p>
<p>Refer to the <a href="https://inversify.github.io/docs/next/fundamentals/inheritance/">inheritance docs</a> for more information.</p>
<h3 class="anchor anchorWithStickyNavbar_swVo" id="factory-like-bindings">Factory-like bindings<a href="https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-0-prerelease/#factory-like-bindings" class="hash-link" aria-label="Direct link to Factory-like bindings" title="Direct link to Factory-like bindings">​</a></h3>
<p><code>Factory</code>, <code>Provider</code>, and <code>DynamicValue</code> bindings now receive a <code>ResolutionContext</code>. Refer to the <a href="https://inversify.github.io/docs/next/api/binding-syntax/#tofactory">API docs</a> for more information.</p>
<h4 class="anchor anchorWithStickyNavbar_swVo" id="motivation">Motivation<a href="https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-0-prerelease/#motivation" class="hash-link" aria-label="Direct link to Motivation" title="Direct link to Motivation">​</a></h4>
<p>Previous <code>Context</code> and <code>Request</code> exposed objects provided internal data which should never be accessed by users. <code>ResolutionContext</code> allows resolving services in the same way <code>Context.container</code> previously allowed.</p>
<h3 class="anchor anchorWithStickyNavbar_swVo" id="binding-constraints">Binding constraints<a href="https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-0-prerelease/#binding-constraints" class="hash-link" aria-label="Direct link to Binding constraints" title="Direct link to Binding constraints">​</a></h3>
<p>Some methods have been renamed. No <code>context</code> is passed to the constraint in favor of a <code>BindingMetadata</code> parameter.</p>
<h4 class="anchor anchorWithStickyNavbar_swVo" id="motivation-1">Motivation<a href="https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-0-prerelease/#motivation-1" class="hash-link" aria-label="Direct link to Motivation" title="Direct link to Motivation">​</a></h4>
<p>Previous <code>Context</code> and <code>Request</code> exposed objects provided internal data which should never be accessed by users. In this specific case, binding constraints are invoked in the planning phase. No resolution-related APIs should be exposed whatsoever, just the metadata used to compute binding constraints such as names, tags, and service IDs in the planning nodes.</p>
<h3 class="anchor anchorWithStickyNavbar_swVo" id="binding-activations">Binding activations<a href="https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-0-prerelease/#binding-activations" class="hash-link" aria-label="Direct link to Binding activations" title="Direct link to Binding activations">​</a></h3>
<p>Binding activations now receive a <code>ResolutionContext</code>. Refer to the <a href="https://inversify.github.io/docs/next/api/binding-syntax/#onactivation">API docs</a> for more information.</p>
<h4 class="anchor anchorWithStickyNavbar_swVo" id="motivation-2">Motivation<a href="https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-0-prerelease/#motivation-2" class="hash-link" aria-label="Direct link to Motivation" title="Direct link to Motivation">​</a></h4>
<p>Previous <code>Context</code> and <code>Request</code> exposed objects provided internal data which should never be accessed by users. <code>ResolutionContext</code> allows resolving services in the same way <code>Context.container</code> previously allowed.</p>
<h2 class="anchor anchorWithStickyNavbar_swVo" id="incoming-changes">Incoming changes<a href="https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-0-prerelease/#incoming-changes" class="hash-link" aria-label="Direct link to Incoming changes" title="Direct link to Incoming changes">​</a></h2>
<p>Some additional changes will be shipped in the <code>inversify@7</code> release.</p>
<h3 class="anchor anchorWithStickyNavbar_swVo" id="performance-optimizations">Performance optimizations<a href="https://inversify.github.io/blog/announcing-inversify-7-0-0-alpha-0-prerelease/#performance-optimizations" class="hash-link" aria-label="Direct link to Performance optimizations" title="Direct link to Performance optimizations">​</a></h3>
<p>With these binding constraint models, it's now reasonable to assume a service plan is cacheable. Planning caches should dramatically improve container performance when providing services.</p>]]></content:encoded>
            <category>Releases</category>
        </item>
        <item>
            <title><![CDATA[Welcome]]></title>
            <link>https://inversify.github.io/blog/welcome/</link>
            <guid>https://inversify.github.io/blog/welcome/</guid>
            <pubDate>Tue, 24 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to the new documentation pages! We are rebuilding our docs on top of Docusaurus to provide a better developer experience.]]></description>
            <content:encoded><![CDATA[<p>Welcome to the new documentation pages! We are rebuilding our docs on top of <a href="https://docusaurus.io/" target="_blank" rel="noopener noreferrer">Docusaurus</a> to provide a better developer experience.</p>
<p><img decoding="async" loading="lazy" alt="Docusaurus Plushie" src="https://inversify.github.io/assets/images/docusaurus-plushie-banner-a60f7593abca1e3eef26a9afa244e4fb.jpeg" width="1500" height="500" class="img_xkYl"></p>
<p>This docs will include the latest released version of <code>inversify</code>. Major Pre releases will be documented as well so you can learn about them and discuss then in the prerelease discussion thread.</p>]]></content:encoded>
        </item>
    </channel>
</rss>